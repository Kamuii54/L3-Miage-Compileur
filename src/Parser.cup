/*
 * analyseur syntaxique
 * expression arithmetique
 *
 * auteur : guillaumepierson8@etu.univ-lorraine.fr
 * (c) 2015
 */ 
package fr.ul.miage.groupe22.compilateur.generated;


import java_cup.runtime.Symbol;
import fr.ul.miage.groupe22.compilateur.environnement.*;

action code {:
	TableDesSymboles tds = new TableDesSymboles();
:}

/* la grammaire */

terminal AO, AF, PO, PF, PV, V, E;
terminal String IDF;
terminal VOID, INT;
terminal CONST, READ, WRITE;
terminal PLUS, MOINS, FOIS, DIVISE;
terminal RETURN;
terminal IF, ELSE, WHILE, INFERIEUR, SUPERIEUR;

non terminal liste_definition, definition, definition_var, definition_fonction;
non terminal liste;
non terminal command,affectation, ret;
non terminal /*Noeud*/ appel;
non terminal /*Type*/ type; /* Type de donn√©es */
non terminal vars, value, facteur, atome;
non terminal /*List<Noeud>*/ parametres;
non terminal /*Noeud*/ parametre;
non terminal /*Noeud*/ expression;
non terminal /*Operateur*/ operateur1, operateur2;
non terminal condition, conditionelse, iteration, boolean_operator, boolean_expression;

start with liste_definition;

liste_definition ::= definition liste_definition
	|
	;

liste  ::= command liste 
	|
	;

/*------debut-------*/
command ::= definition | affectation | ret | condition | iteration | appel PV
    ;
    
definition ::= definition_var | definition_fonction
	;

definition_var ::= type:t IDF:n value vars PV
	;

definition_fonction ::= type:t IDF:n PO parametres PF AO liste AF
	;
             
vars ::= V IDF value vars
		|
	; 
	
value ::= E expression |  
	;
	
type ::= VOID// {: RESULT = new Type.VOID; :}
	   | INT// {: RESULT = new Type.INT; :} 
	;
	
appel ::= IDF PO parametres PF 
		| READ PO PF //{: RESULT = new Noeud(Noeud.READ) :}
		| WRITE PO parametre PF
	;
	
parametres ::= parametre V parametres | parametre |
	;
	
parametre ::= type IDF | expression
	;

affectation ::= IDF E expression PV
	;
	
expression ::= expression operateur1 facteur | facteur
	;
	
facteur ::= facteur operateur2 atome | atome | operateur1 atome
	;
	
atome ::= CONST:c //{: RESULT = new Noeud(new Constante(c)) :}
		| IDF:s/// {: RESULT = new Noeud(new IDF(tds.find(s)) :}
		| appel:a //{: RESULT = a :}
		| PO expression:a PF //{: RESULT = a; :}
	;
	
operateur1 ::= PLUS //{: RESULT = new Plus(); :}
		| MOINS //{: RESULT = new Moins(); :}
	;
	
operateur2 ::= FOIS //{: RESULT = new Fois(); :}
		 | DIVISE// {: RESULT = new Divise(); :}
	;
	
ret ::= RETURN expression PV
	;

condition ::= IF PO boolean_expression PF AO liste AF conditionelse 
	;
	
conditionelse ::= ELSE AO liste AF | 
	;
	
boolean_expression ::= expression boolean_operator boolean_expression | expression
	;
	
boolean_operator ::= INFERIEUR | SUPERIEUR | E E 
	;	
	
iteration ::= WHILE PO boolean_expression PF AO liste AF
	;
/*------fin--------*/