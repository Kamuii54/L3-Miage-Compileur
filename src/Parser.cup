/*
 * analyseur syntaxique
 * expression arithmetique
 *
 * auteur : guillaumepierson8@etu.univ-lorraine.fr
 * (c) 2015
 */ 
package fr.ul.miage.groupe22.compilateur.generated;


import java_cup.runtime.Symbol;
import fr.ul.miage.groupe22.compilateur.instructions.*;
import fr.ul.miage.groupe22.compilateur.environnement.*;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.HashSet;

parser code {:
	
	/**
	* Methode affiche : Affichage de la Table Des Symbols
	*/
	public void affiche() {
		action_obj.master.affiche(0, false, new ArrayList<>());
		System.out.println(action_obj.tds);
	}
	
	/**
	* Methode generate : Genere le code du noeud principal ( arbre )
	@return String : code genere
	*/
	public String generate() {
		return action_obj.master.genererCode(action_obj.tds,ScopeGlobal.getInstance());
	}

:}

action code {:
	//table des symboles du programme
	TableDesSymboles tds = new TableDesSymboles();
	
	//noeud principal
	Noeud master = new Root();
	
	//Liste des symbole non declare
	Set<Symbole> undeclared = new HashSet<>();

	//Pile des portees de variables
	public Stack<Scope> scopes = new Stack<>();

	/**
	* Methode newScope : Ajoute une nouvelle portee a la pile
	*/
	public void newScope() {
		scopes.push(new Scope());
	}
	
	/**
	* Methode getLastScope 
	* @return Scope : portee actuel de l'analyse
	*/
	public Scope getLastScope() {
    	if (scopes.isEmpty()) {
    	   return ScopeGlobal.getInstance();
    	}
		return scopes.peek();
	}

	/*
	* Methode deleteScope : Supprime la derniere portee
	* @return Scope
	*/
	public Scope deleteScope() {
		return scopes.pop();
	}

	/**
	* Methode verifierUndeclared
	* Verifie si des variables n ont pas ete declares
	*/
	public void verifierUndeclared() throws Exception {
		if(!undeclared.isEmpty()){
			Iterator<Symbole> it = undeclared.iterator();
			while(it.hasNext()){
				Symbole sym = it.next();
				System.err.println("Symbole " + sym.getName() + " non déclaré");
			}
			throw new Exception("Variables non déclarés");
		}
	}

	/**
	* Methode createAffect
	* @param idf : String : nom de la variable
	* @param n : Noeud : noeud expression a affecter a la variable
	* @return Affectaction : noeud correspondant
	*/
	public Affectation createAffect(String idf, Noeud n) {
		Affectation n_ret = null;
		//il met variable dans T..
		Noeud n_g = new Variable(idf);
		Noeud n_d = n;
		n_ret = new Affectation();
		n_ret.InsererFilsGauche(n_g);
		n_ret.InsererFilsDroit(n_d);
		return n_ret;
	}

	/**
	* Methode addVartoTDS : Ajoute une variable dans la table des symboles
	* @param t : Type : type de la variable
	* @param idf : String : nom de la variable
	* @param temp : boolean : indique si la variable temporaire donc non défini
	* @param isParam : boolean : indique si la variable est un paramètre
	* @return Symbole : symbole ajout� au TDS
	*/
	public Symbole addVarToTDS(Type t, String idf, boolean temp, boolean isParam) throws Exception{
		Symbole s;
		Definition d  = new Definition(idf, getLastScope());
		String type;
		//on attribut le type de variable 
		if(isParam){
			type = "parametre";
		}else{
			if(getLastScope() == ScopeGlobal.getInstance())
				type ="variable";
			else
				type = "local";
		}
		// on verifie que la variable est dans le tds
		if (tds.hasSymbole(d)) {
			s = tds.getSymbole(d);
			//on verifie si le type de la variable correspond
			if(t != s.getType())
				throw new Exception("Variable "+idf+" a été appelé avec un autre type de données");
			//on verifie que la variable n'est pas temporaire
			if(!temp){
				//on verifie que la variable n est pas deja declare
				if(s.get("undeclared") == null)
					throw new Exception("Variable "+idf+" a été déclaré deux fois");
				s.remove("undeclared");
				undeclared.remove(s);
				if(getLastScope() == ScopeGlobal.getInstance()){
					s.add("type", "local");
					tds.remove(d);
					//ajout dans le tds
					tds.insert(idf, getLastScope(), s);
				}
			}
		}else{
			//ajout dans le tds
			s = new Symbole(idf, t, getLastScope(),type);
			tds.insert(idf, getLastScope(), s);
		}
		if(temp){
		//ajout d une variable temporaire
			s.add("undeclared", "true");
			undeclared.add(s);
		}
		if(isParam){
		//la variable est un parametre
			s.add("type", "parametre");
			s.add("rang", ""+getLastScope().getRangParam());
			getLastScope().addRangParam();
		}
		return s;
	}

	/**
	* Methode defVar : Definit une variable en fonction d une constante
	* @param t : Type : type de la variable
	* @param idf : String : nom de la variable
	* @param n : Constante : valeur de la variable
	* @param temp : boolean : indique si la variable temporaire donc non défini
	*/
	
	public void defVar(Type t, String idf, Constante n, boolean temp) throws Exception{
		Symbole s = addVarToTDS(t, idf, temp, false);
		if(!temp){
			Noeud n_ret = null;
			if (n != null) {
			
				n_ret = createAffect(idf, n);
				s.add("valeur defaut", ""+n.getValue());
			} else {
				// valeur par défaut
				n_ret = createAffect(idf, new Constante(0));
				s.add("valeur defaut",""+0);
			}
			s.add("rang", ""+getLastScope().getRangVar());
			getLastScope().addRangVar();
		}
	}
	
	/**
	* Methode insertionFgFd : insere un fils gauche et droit dans un noeud
	* @param o : Noeud : noeud pere
	* @param f : Noeud : fils gauche
	* @param a : Noeud : fils droit
	* @return Noeud : mis a jour
	*/
	
	public Noeud insertionFgFd(Noeud o, Noeud f, Noeud a) {
		o.InsererFilsGauche(f);
		o.InsererFilsDroit(a);
		return o;
	}
	
	/**
	*Methode existVar : Verifie si une variable est contenu dans le tds
	*@param idf : nom de la variable
	*/
	
	public void existVar (String idf) throws Exception{
		if (!tds.hasSymbole(new Definition(idf,getLastScope()))) {
			if (!tds.hasSymbole(new Definition(idf,ScopeGlobal.getInstance()))) {
				throw new Exception ("Variable "+ idf +" non d�finie");
			}
		}
	}
	
	/**
	* Methode isFonctionInt : Verifie si une fonction est de type INT
	* @param n : Noeud de la fonction
	* @param param : Liste des parametres de la fonction
	*/
	
	public void isFonctionInt (Noeud n, ArrayList<Noeud> param) throws Exception{
		Symbole s;
		if(n.getIdf() != "read"){
			if (!tds.hasSymbole(n.getIdf(), ScopeGlobal.getInstance())) {
				this.defFonction(Type.INT, n.getIdf(), null, param, true);		
			}else{
				s = tds.getSymbole(n.getIdf(), ScopeGlobal.getInstance());
				if(s.getType() != Type.INT)
				 	throw new Exception ("Fonction "+ n.getIdf() +" mauvais typage");
			}
		}
	}
	
	/**
	* Methode isVarInt : Verifie si une variable est de type INT
	* @param n : Noeud de la variable
	*/
	
	public void isVarInt (Noeud n) throws Exception{
		Symbole s;
		if (!tds.hasSymbole(n.getIdf(), getLastScope()) && !tds.hasSymbole(n.getIdf(), ScopeGlobal.getInstance())) {
			this.addVarToTDS(Type.INT, n.getIdf(), true, false);
		}else{
			s = tds.getSymbole(n.getIdf(), getLastScope());
			if(s.getType() != Type.INT)
			 	throw new Exception ("Variable "+ n.getIdf() +" mauvais typage");
		}
	}

	/**
	* Methode verifNbParam : Verifie que le nombre de parametres d'un appel correspondant a la fonction
	* @param idf : nom de la fonction
	* @param p : ArrayList<Noeud> : liste des parametres d'appel
	*/
	public void  verifNbParam(String idf, ArrayList<Noeud> p) throws Exception {
		Definition d = new Definition(idf,ScopeGlobal.getInstance());
		if (tds.hasSymbole(d)) {
			Symbole s = tds.getSymbole(d);
			
			String nbparam = s.getValues().get("nbParam"); 
			if (Integer.parseInt(nbparam)!=p.size()) { 
				 throw new Exception ("Fonction "+ idf +" mauvais nombre paramètres");
			}
		}
	}
	
	/**
	* Methode defFonction : Definit une fonction dans le tds,
	* Si la fonction a été défini temporairement avant supprime l'attribut undeclared et mets à jour ses attributs si temp est à faux
	* @param t : Type de la fonction
	* @param n : noeud de la fonction
	* @param fils : ArrayList<Noeud> : liste des sous instructinos de la fonction
	* @param param : ArrayList<Noeud> : liste des parametres
	* @param temp : fonction temporaire donc non défini
	*/
	public void defFonction(Type t, String n, ArrayList<Noeud> fils, ArrayList<Noeud> param, boolean temp) throws Exception{
		Noeud noeud_f = new Fonction(n);
		Definition d = new Definition(n,ScopeGlobal.getInstance());
		Symbole s;

		if (tds.hasSymbole(d)) {
			s = tds.getSymbole(d);
			if(t != s.getType())
				throw new Exception("Fonction "+n+" a été appelé avec un autre type de données");
			if(param.size() != Integer.parseInt(s.get("nbParam")))
				throw new Exception("Nombre incorrect de paramètres pour " + n);
			if(!temp){
				if(s.get("undeclared") == null)
					throw new Exception("Fonction "+n+" a été déclaré deux fois");
				s.remove("undeclared");
				undeclared.remove(s);
				s.setScope(getLastScope());
			}
		}else{
			s = new Symbole(n, t, getLastScope());
			tds.insert(n, ScopeGlobal.getInstance(), s);
		}
		if(param != null)
			s.add("nbParam", ""+param.size());
		else 
			s.add("nbParam", "0");

		s.add("type", "fonction");
		if(!temp){
			for (Noeud noeud : param) {	
				Symbole pa = addVarToTDS(Type.INT, noeud.getIdf(), false, true);
			}
			noeud_f.InsererListeFils(fils);
			master.InsererUnFils(noeud_f);

			Set cles = tds.getTable().keySet();
			Iterator it = cles.iterator();
			int nbVar=0;	
			for (Map.Entry<Definition, Symbole> entry : tds.getTable().entrySet()) {	
				Definition key = entry.getKey();
				Symbole sym = tds.getSymbole(key);
				if (key.getScope().equals(getLastScope()) && sym.get("type") == "local") {
					nbVar++;
				}
			}
			s.add("nbVariable", ""+nbVar);

		}else{
			s.add("undeclared", "true");
			undeclared.add(s);
		}
	}

	/**
	* Methode createIf : cree un noeud de type If
	* @param b : Noeud conditionnel
	* @param l : ArrayList<Noeud> : clause if
	* @param c : ArrayList<Noeud> : clause else
	* @preturn Noeud : noeud "if"
	*/
	
	public Noeud createIf(Noeud b, ArrayList<Noeud> l, ArrayList<Noeud> c) {
		Noeud n_ret = new Condition();
		n_ret.InsererUnFils(b);
		n_ret.InsererUnFils(new Container(l));
		if (c != null) {
			n_ret.InsererUnFils(new Container(c));
		}
		return n_ret;
	}

	/**
	* Methode createBool : cree un noeud de type booleen
	* @param e : operateur booleen
	* @param bo : booleen gauche
	* @param be : booleen droit
	* @return Noeud : noeud expression booleenne
	*/

	public Noeud createBool(Noeud e, Noeud bo, Noeud be) {
	
		bo.InsererFilsGauche(e);
		bo.InsererFilsDroit(be);
		return bo;
	}

	/**
	* Methode createBoucle : cree un noeud de type boucle
	* @param be : Noeud conditionnelle de la boucle
	* @param l : ArrayList<Noeud> : liste d'instructions de la boucle
	* @return Noeud : noeud "boucle"
	*/
	
	public Noeud createBoucle(Noeud be, ArrayList<Noeud> l) {
		Noeud n_ret = new Boucle();
		n_ret.InsererFilsGauche(be);
		n_ret.InsererFilsDroit(new Container(l));

		return n_ret;
	}

	/**
	* Methode defMultiVar : Definit une liste de variables
	* @param t : Type : type des variable
	* @param idf : String : nom de la premiere variable
	* @param n : Constante : valeur de la premiere variable
	* @param l : HashMap<Variable,Noeud> : liste des variables/valeurs associ�es
	*/
	
	public void defMultiVar(Type t, String idf, Constante n, HashMap<Variable,Noeud> l) throws Exception {
		defVar(t, idf, n, false);

		Set cles = l.keySet();
		Iterator it = cles.iterator();
		//boucle sur l'ensemble des variables
		for (Map.Entry<Variable, Noeud> entry : l.entrySet()) {
			Variable key = entry.getKey();
			//definition de la variable
			defVar(t, key.getIdf(), n, false);
		}
	}
	
:}
 
/* la grammaire */

terminal AO, AF, PO, PF, PV, V, E;
terminal String IDF;
terminal VOID, INT;
terminal READ, WRITE;
terminal PLUS, MOINS, FOIS, DIVISE;
terminal RETURN;
terminal IF, ELSE, WHILE, INFERIEUR, SUPERIEUR;
terminal Integer CONST;

non terminal liste_definition, definition, definition_var, definition_fonction;
non terminal ArrayList<Noeud> liste,conditionelse, parametres;
non terminal Noeud affectation, ret;
non terminal Noeud appel, facteur, atome;
non terminal Constante value;
non terminal Type type; /* Type de donnÃ©es */
non terminal HashMap<Variable,Noeud> vars;
non terminal Noeud parametre;
non terminal Noeud expression;
non terminal Noeud operateur1, operateur2;
non terminal Noeud boolean_expression, boolean_operator;
non terminal Noeud condition, iteration;
non terminal Noeud command;

non terminal boot;


start with boot;

boot ::= liste_definition {: verifierUndeclared(); :};

liste_definition ::= definition liste_definition
	|
	;

liste  ::= command:c liste:l {: if (l==null) {l=new ArrayList<Noeud>();} l.add(0, c); RESULT = l; :}
	| {: RESULT = new ArrayList<Noeud>(); :}
	;

/*------debut-------*/
command ::= definition {: RESULT=new Container(); :}| affectation:af {: RESULT=af; :} | ret:r {: RESULT=r; :} | condition:c {: RESULT=c; :} | iteration:i {: RESULT=i; :} | appel:a {: RESULT=a; :} PV
    ;
    
definition ::= definition_var | definition_fonction
	;

definition_var ::= type:t IDF:n value:v vars:l PV
{: if (l==null) {defVar(t,n,v, false); } else { defMultiVar(t,n,v,l); } :}
	;

definition_fonction ::=  type:t IDF:n PO {: newScope(); :} parametres:p PF  AO liste:l AF
{: defFonction(t,n,l,p, false); deleteScope();:}
	;
             
vars ::= V IDF:i value:v vars:l {: Variable var = new Variable(i); 
if (l==null) { l = new HashMap<Variable,Noeud>(); } l.put(var,v); RESULT=l; :}
		|
	; 
	/*
value ::= E expression:e {: RESULT = e; :} |   {: RESULT = null; :}
	;
	*/
value ::= E CONST:c {: RESULT = new Constante(c); :} | E operateur1:o CONST:c {: RESULT = new Constante(Integer.parseInt(o.getIdf()+c)); :}| {: RESULT = null; :}
	;	
	
type ::= VOID {: RESULT = Type.VOID; :}
	   | INT {: RESULT = Type.INT; :} 
	;
	
appel ::= IDF:idf PO parametres:p PF {:  verifNbParam(idf,p); Noeud n = new Appel(idf); n.InsererListeFils(p); RESULT = n; :}
		| READ PO PF {: RESULT = new Read(); :}
		| WRITE PO parametre:p PF  {: Noeud n = new Write(); n.InsererUnFils(p); RESULT = n; :}
	;
	
parametres ::= parametre:p V parametres:l {: if (l==null) {l = new ArrayList<Noeud>(); } l.add(0, p); RESULT = l; :} 
		| parametre:p {: ArrayList<Noeud> l = new ArrayList<Noeud>(); l.add(0, p); RESULT = l; :}
		| {: RESULT = new ArrayList<Noeud>(); :}
	;
	
parametre ::= type:t IDF:idf  {: Variable var = new Variable(idf); RESULT=var; :} | expression:e {: RESULT=e; :} 
	;

affectation ::= IDF:idf E expression:e PV {: existVar(idf);Noeud n=createAffect(idf,e);RESULT=n; :}
	;
	
expression ::= expression:e operateur1:o facteur:f {: RESULT = insertionFgFd(o,e,f); :} | facteur:f {: RESULT=f; :}
	;
	
facteur ::= facteur:f operateur2:o atome:a {: RESULT = insertionFgFd(o,f,a); :} | atome:a {: RESULT=a; :} 
		  | operateur1:o atome:a {: RESULT = insertionFgFd(o,new Constante(0),a); :}
	;
	
atome ::= CONST:c {: RESULT = new Constante(c); :}
		| IDF:s {: Variable var= new Variable(s); isVarInt(var); RESULT = var; :}
		| appel:a {: isFonctionInt (a, a.getListeFils()); RESULT = a; :}
		| PO expression:a PF {: RESULT = a; :}
	;
	
operateur1 ::= PLUS {: RESULT = new Addition(); :}
		| MOINS {: RESULT = new Soustraction(); :}
	;
	
operateur2 ::= FOIS {: RESULT = new Multiplication(); :}
		 | DIVISE {: RESULT = new Division(); :}
	;
	
ret ::= RETURN expression:e PV {: Noeud n = new Return(); n.InsererUnFils(e); RESULT = n; :}
	;

condition ::= IF PO boolean_expression:b PF AO liste:l AF conditionelse:c {: RESULT=createIf(b,l,c); :}
	;
	
conditionelse ::= ELSE AO liste:l AF {: RESULT = l; :} | {: RESULT = null; :} 
	;
	
boolean_expression ::= expression:e boolean_operator:bo boolean_expression:be {: RESULT = createBool(e,bo,be); :} | expression:e {: RESULT = e; :} 
	;
	
boolean_operator ::= INFERIEUR {: RESULT = new ComparateurInferieur(); :} | SUPERIEUR {: RESULT = new ComparateurSuperieur(); :} | E E {: RESULT = new ComparateurEgal(); :}
	;	
	
iteration ::= WHILE PO boolean_expression:be PF AO liste:l AF {: RESULT=createBoucle(be,l); :}
	;
/*------fin--------*/